package elavator.app;

public class Main extends Keyword {

	public Main() {

		for(int i = 0 ; i < MAXFLOOR ; ++i) floor = new Floor[1];
		for(int i = 0 ; i < 3 ; ++i) elevator[i] = new Elevator[1];
	}

	public static void main(String[] args) {
		Main init = new Main();
		init.Play();		
	}


	protected void Play() {
		int randWay;
		int randPassenger;
		int isWaiting = NO;
		int isMoving = NO;
		int time = 0;
		int currentFloor = 1;

		while(time++ < 100) {

			// passenger hit each floor DOWN UP UPANDDOWN
			// floor.hitFloor()

			Floor[] tempFloor = new Floor[MAXFLOOR];

			for(int i = 0 ; i < MAXFLOOR ; ++i) {
				randWay = rand.nextInt(UP + DOWN);
				randPassenger = rand.nextInt(MAXPASSENGER);
				tempFloor[i].setWay(rand.nextInt(UP + DOWN));

				if(randWay != 0) {
					tempFloor[i].checkInPassenger(randPassenger);
					isWaiting = YES;
				}

				floor[i].setWay(tempFloor[i].getWay() & floor[i].getWay());
				floor[i].checkInPassenger(randPassenger);
			}


			/*
			 * 한틱에 두가지 액션: 문 열리고 태우고내리기, 한층 움직이기

			 * 언제 문이 열리나
					엘베의 있는 층에 버튼이 눌렸을때
					엘베에 그 층이 눌렸을 때
						같은방향


			 * 언제 움직이나
					처음 
					엘베 있는 층에 버튼이 '안' 눌렸을때
					엘베에 그 층이 '안' 눌렸을때

			 * 누가 움직이나
						세 개의 엘베중 그 방향이고,
							가장 가까운거
						셋다 아니면 바쁨,,, 일단대기
			 */

			// if elevator hasDestination, open
			for(int i = 0 ; i < ELEVATORAMOUNT ; ++i) {

				currentFloor = elevator[i].getCurrentFloor();

				if(elevator[i].hasDestination()) {
					elevator[i].checkOutPassenger(currentFloor);
					floor[currentFloor].setWay(WAIT);
					elevator[i].setIsStopped(YES);
				}
				else if(elevator[i].getWay() == floor[currentFloor].getWay()) {
					elevator[i].checkInPassenger(floor[currentFloor]);
					floor[currentFloor].setWay(WAIT);
					elevator[i].setIsStopped(YES);
				}
			}


			// 해당 층으로부터 가장 가까운 엘베 구하기
			int minDistanceElevator = MAXFLOOR + 1;

			for(int i = 0 ; i < ELEVATORAMOUNT; ++i) {
				int distance = elevator[i].getDistanceCurrentFloorFromHitFloor(floor);
				minDistanceElevator = minDistanceElevator < distance ? minDistanceElevator : distance;
			}

			//elevator[minDistanceElevator].addFloors();







			// if passenger is waiting

			for(int i = 0 ; i < ELEVATORAMOUNT ; ++i) {

				if(elevator[i].getWay() == DOWN) {
					for(int j = i ; j > 0 ; --j) {

					}
				}
				else if(elevator[i].getWay() == UP) {
					for(int j = i ; j <= MAXFLOOR ; ++j) {
						//if(elevator[i].getCurrentFloor())
					}
				}
			}



			// else move UP DOWN to destination of elevator

			for(int i = 0 ; i < ELEVATORAMOUNT ; ++i) {
				elevator[i].moveElevator(i);
			}




			for(int i = 0 ; i < ELEVATORAMOUNT; ++i)
				showElevator(i);


		}

	}	


	private void showElevator(int i) {
		elevator[i].toString();
	}

}
